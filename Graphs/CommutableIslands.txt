public class Solution {
    class Edge{
        int node1;
        int node2;
        int weight;
        
        Edge(int n1, int n2, int wt){
            node1 = n1;
            node2 = n2;
            weight = wt;
        }
    }
    
    class DisjointSet{
        int []parent;
        DisjointSet(int n){
            // for n nodes, n parents
            // Nodes are 1-based
            parent = new int[n+1];
            init();
        }
        
        
        // make every node parent of itself
        void init(){
            for(int i=0;i<parent.length;i++)
                parent[i]=i;
        }
        
        // Gives the representative of the tree/island : gives the root 
        int find(int x){
            if(x==parent[x])
                return x;
            parent[x] = find(parent[x]);
            
            return parent[x];
        }
        
        void union(int n1, int n2){
            int island1 = find(n1);
            int island2 = find(n2);
            
            if(island1==island2)
                return;
            parent[island1]=island2;
        }
        
        void printFinds(){
            for(int i=0;i<parent.length;i++)
                System.out.println("i "+i+" "+find(i));
        }
        
    }
    
    public int solve(int A, ArrayList<ArrayList<Integer>> B) {
        
        int nodes_cnt = A;
        //bcoz to make minimum spanning tree we need n-1 edges
        int edges_req = nodes_cnt-1;
        //ArrayList<Edge> edges = new ArrayList();
        int result_wt = 0;
        
        
         PriorityQueue<Edge> edges = new PriorityQueue<Edge>(new Comparator<Edge>(){
            @Override
            public int compare(Edge a, Edge b){
                return Integer.compare(a.weight, b.weight);
            }
        });
        
        for(int i=0;i<B.size();i++){
            edges.add(new Edge(B.get(i).get(0),B.get(i).get(1), B.get(i).get(2)));
        }
    
        DisjointSet disjoint = new DisjointSet(nodes_cnt);        
        // Find the nodes of every edge, if they belong to same 
        // island/tree : if its same island, ignore and proceed to next edge
        // If considering the edge, add to the result_wt
        
        while(!edges.isEmpty()){
            Edge curEdge = edges.poll();
            int tree1 = disjoint.find(curEdge.node1);
            int tree2 = disjoint.find(curEdge.node2);
            
            // Parents of these nodes are not same, so take the edge
            if(tree1!=tree2){
                result_wt+=curEdge.weight;
                disjoint.union(curEdge.node1,curEdge.node2);
            }
            
        }
        
        return result_wt;
    }
}
